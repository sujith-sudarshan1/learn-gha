name: Env based reusable workflow

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment"
        type: "string"
        required: true
    secrets:
      SOME_PASSWORD:
        description: "Some password"
        required: true
      OTHER_PASSWORD:
        description: "Other password"
        required: true

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        type: environment

permissions:
  pull-requests: write

jobs:
  reusable_job_1:
    name: Re-usable job 1
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - id: step1
        env:
          SOME_PASSWORD: ${{ secrets.SOME_PASSWORD }}
          OTHER_PASSWORD: ${{ secrets.OTHER_PASSWORD }}
        run: |
          echo "$SOME_PASSWORD"
          if [[ $SOME_PASSWORD == "some_dev_password" ]]; then
            echo "This is the DEV password!"
          else
            echo "This is NOT the DEV password!"
          fi

          echo "$SOME_PASSWORD"
          if [[ $SOME_PASSWORD == "some_test_password" ]]; then
            echo "This is the TEST password!"
          else
            echo "This is NOT the TEST password!"
          fi

          echo "$OTHER_PASSWORD"
          if [[ $OTHER_PASSWORD == "other_dev_password" ]]; then
            echo "This is the DEV password!"
          else
            echo "This is NOT the DEV password!"
          fi

          echo "$OTHER_PASSWORD"
          if [[ $OTHER_PASSWORD == "other_test_password" ]]; then
            echo "This is the TEST password!"
          else
            echo "This is NOT the TEST password!"
          fi

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Bot Title')
            })

            // 2. Prepare format of the comment
            const output = `#### Bot Title ðŸ–Œ
            <details><summary>Validation Output</summary></details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
    